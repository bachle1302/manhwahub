const User = require('../models/user');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');

const register = async (req, res) => {
  try {
      const { name, email, password } = req.body;
      if (!name || !email || !password) {
          return res.status(400).json({ error: "T·∫•t c·∫£ c√°c tr∆∞·ªùng (t√™n, email, m·∫≠t kh·∫©u) ƒë·ªÅu l√† b·∫Øt bu·ªôc." });
      }

      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
          return res.status(400).json({ error: "ƒê·ªãnh d·∫°ng email kh√¥ng h·ª£p l·ªá." });
      }

      if (password.length < 6) {
          return res.status(400).json({ error: "M·∫≠t kh·∫©u ph·∫£i d√†i √≠t nh·∫•t 6 k√Ω t·ª±." });
      }

      const existingUser = await User.findOne({ where: { email } });
      if (existingUser) {
          return res.status(400).json({ error: "Email ƒë√£ t·ªìn t·∫°i. Vui l√≤ng s·ª≠ d·ª•ng email kh√°c." });
      }

      const hashedPassword = bcrypt.hashSync(password, 10);

      // ‚úÖ T·∫°o ng∆∞·ªùi d√πng m·ªõi
      const user = await User.create({
          name,
          email,
          password: hashedPassword,
          role_id: 0, // Ng∆∞·ªùi d√πng th∆∞·ªùng
      });
      res.status(201).json({message: "ƒêƒÉng k√≠ th√†nh c√¥ng"});

  } catch (error) {
      // console.error("L·ªói ƒëƒÉng k√≠:", error);
      res.status(500).json({ error: "L·ªói m√°y ch·ªß n·ªôi b·ªô." });
  }
};

const login = async (req, res) => {
  try {
      const { email, password, remember } = req.body;

      const user = await User.findOne({ where: { email } });
      if (!user) return res.status(404).json({ message: "Kh√¥ng th·∫•y user" });

      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) return res.status(401).json({ message: "Sai pass" });

      // T·∫°o JWT token
      const jwt_token = jwt.sign({ id: user.id,role_id: user.role_id }, process.env.JWT_SECRET, { expiresIn: "1h" });

      // X·ª≠ l√Ω remember token
      const rememberToken = crypto.randomBytes(48).toString('hex');
      res.cookie("remember_token", rememberToken, {
          httpOnly: true,
          secure: true,
          maxAge: 365 * 24 * 60 * 60 * 1000 // 1 nƒÉm
      });
      if (remember === true) {
          await User.update(
              { remember_token: rememberToken },
              { where: { id: user.id } }
          );
      }

      // Tr·∫£ v·ªÅ k·∫øt qu·∫£
      res.json({
        message: "Login successful",
        jwt_token,
        user: {
          id: user.id,
          name: user.name,
          email: user.email,
          role: user.role_id,
          exp: user.exp,
          avatar: user.avatar,
          total_point: user.total_point
        },rememberToken
      });
  } catch (error) {
      console.error("Login Error:", error);
      res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};

const logout = async (req, res) => {
  try {
      const rememberToken = req.cookies.remember_token;

      if (rememberToken) {
          // T√¨m user d·ª±a tr√™n remember token
          const user = await User.findOne({ where: { remember_token: rememberToken } });

          if (user) {
              // X√≥a remember token kh·ªèi database
            await User.update({ remember_token: null }, { where: { id: user.id } });
          }

          // X√≥a cookie ch·ª©a remember token
          res.clearCookie('remember_token');
      }

res.status(200).json({ message: "Logged out successfully" });
return;
  } catch (error) {
      console.error('Logout error:', error);
      return res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};

const refreshToken = async (req, res) => {
  try {
      const token = req.cookies.refresh_token; // L·∫•y Refresh Token t·ª´ cookie
      if (!token) return res.status(401).json({ message: "Kh√¥ng th·∫•y token " });

      const user = await User.findOne({ where: { refresh_token: token } });
      if (!user) return res.status(401).json({ message: "L·ªói" });

      // üîπ T·∫°o JWT m·ªõi (h·∫°n 1h)
      const new_jwt = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: "1h" });

      res.json({ new_jwt: new_jwt });
  } catch (error) {
      return res.status(401).json({ message: "Refresh token kh√¥ng h·ª£p l·ªá" });
  }
};

module.exports = {
  register,
  login,
  logout,
  refreshToken,
};
