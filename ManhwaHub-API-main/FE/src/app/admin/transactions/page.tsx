"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import Cookies from "js-cookie";
import "bootstrap/dist/css/bootstrap.min.css";
import axios from "axios";
import { ReactElement } from 'react';
import Link from "next/link";

interface User {
  id: number;
  email: string;
  name: string;
  exp?: number;
  avatar?: string | null;
  total_point?: number;
}

interface Transaction {
  id: number;
  user_id: number;
  amount: number;
  type: string;
  status: string;
  description: string | null;
  created_at: string;
  updated_at: string;
}

interface TransactionsResponse {
  status?: string;
  data?: Transaction[];
  meta?: {
    currentPage: number;
    totalPages: number;
    totalTransactions: number;
  };
}

function AdminTransactionsContent(): ReactElement {
  const router = useRouter();
  const [isAdmin, setIsAdmin] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [allTransactions, setAllTransactions] = useState<Transaction[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [filteredUsers, setFilteredUsers] = useState<User[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalTransactions, setTotalTransactions] = useState(0);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  useEffect(() => {
    const token = Cookies.get("token");
    const role = Cookies.get("role");
    
    if (!token) {
      // Only redirect to login if no token exists
      router.push("/auth/login");
    } else {
      const roleNum = parseInt(role || "0");
      if (roleNum !== 2) {
        // If user is logged in but not an admin, set error state instead of redirecting
        setError("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y. Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ xem giao d·ªãch.");
        setIsAdmin(false);
      } else {
        setIsAdmin(true);
        fetchUsers();
      }
    }
  }, [router]);

  useEffect(() => {
    console.log("Current users state:", users);
    console.log("Filtered users:", filteredUsers);
  }, [users, filteredUsers]);

  const fetchUsers = async () => {
    try {
      // Only fetch if user is admin
      const role = Cookies.get("role");
      if (parseInt(role || "0") !== 2) {
        setError("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y.");
        return;
      }
      
      const token = Cookies.get("token");
      if (!token) {
        setError("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        router.push("/auth/login");
        return;
      }
      
      const response = await axios.get("http://localhost:9999/api/user", {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      console.log("API Response:", response.data);
      if (Array.isArray(response.data)) {
        setUsers(response.data);
      } else if (response.data.data && Array.isArray(response.data.data)) {
        setUsers(response.data.data);
      } else if (response.data.users && Array.isArray(response.data.users)) {
        setUsers(response.data.users);
      } else {
        console.error("C·∫•u tr√∫c d·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng:", response.data);
        setError("D·ªØ li·ªáu ng∆∞·ªùi d√πng kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng");
      }
    } catch (error: any) {
      console.error("L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng:", error);
      
      if (error.response?.status === 401) {
        setError("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        Cookies.remove("token");
        Cookies.remove("role");
        setTimeout(() => {
          router.push("/auth/login");
        }, 2000);
        return;
      }
      
      setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng");
    }
  };

  const fetchUserDetails = async (userId: number) => {
    try {
      // Only fetch if user is admin
      const role = Cookies.get("role");
      if (parseInt(role || "0") !== 2) {
        setError("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu n√†y.");
        return;
      }
      
      const token = Cookies.get("token");
      if (!token) {
        setError("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        router.push("/auth/login");
        return;
      }
      
      const response = await axios.get(`http://localhost:9999/api/user/${selectedUserId}`, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      setSelectedUser(response.data.user);
      console.log("API Response:", response.data);
    } catch (error: any) {
      console.error("L·ªói khi t·∫£i th√¥ng tin ng∆∞·ªùi d√πng:", error);
      
      if (error.response?.status === 401) {
        setError("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        Cookies.remove("token");
        Cookies.remove("role");
        setTimeout(() => {
          router.push("/auth/login");
        }, 2000);
        return;
      }
      
      setError("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng");
    }
  };

  const fetchTransactions = async () => {
    if (!selectedUserId) return;

    try {
      // Only fetch if user is admin
      const role = Cookies.get("role");
      if (parseInt(role || "0") !== 2) {
        setError("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu n√†y.");
        return;
      }
      
      setIsLoading(true);
      const token = Cookies.get("token");
      if (!token) {
        setError("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        router.push("/auth/login");
        return;
      }
      
      const response = await axios.get<Transaction[]>(
        `http://localhost:9999/api/transactions/user/${selectedUserId}`,
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );
      
      // API tr·∫£ v·ªÅ m·∫£ng tr·ª±c ti·∫øp, kh√¥ng c√≥ c·∫•u tr√∫c meta
      const allTransactions = response.data;
      setAllTransactions(allTransactions);
      setTotalTransactions(allTransactions.length);
      
      // Kh√¥ng c√≥ ph√¢n trang t·ª´ API, n√™n t·ª± x·ª≠ l√Ω ph√¢n trang ·ªü client
      const itemsPerPage = 10;
      const calculatedTotalPages = Math.ceil(allTransactions.length / itemsPerPage);
      setTotalPages(calculatedTotalPages);
      
      // Ph√¢n trang s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong useEffect khi currentPage thay ƒë·ªïi
    } catch (error: any) {
      console.error("L·ªói khi t·∫£i danh s√°ch giao d·ªãch:", error);
      
      if (error.response?.status === 401) {
        setError("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        Cookies.remove("token");
        Cookies.remove("role");
        setTimeout(() => {
          router.push("/auth/login");
        }, 2000);
        return;
      }
      
      // N·∫øu l·ªói 404, c√≥ nghƒ©a l√† kh√¥ng c√≥ giao d·ªãch, hi·ªÉn th·ªã danh s√°ch r·ªóng
      if (axios.isAxiosError(error) && error.response?.status === 404) {
        setAllTransactions([]);
        setTransactions([]);
        setTotalTransactions(0);
        setTotalPages(1);
      } else {
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch giao d·ªãch");
      }
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (selectedUserId) {
      // Check admin permission first
      const role = Cookies.get("role");
      if (parseInt(role || "0") !== 2) {
        setError("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu n√†y.");
        return;
      }
      
      fetchTransactions();
      fetchUserDetails(selectedUserId);
    }
  }, [selectedUserId]);

  useEffect(() => {
    if (allTransactions.length > 0) {
      const itemsPerPage = 10;
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = startIndex + itemsPerPage;
      console.log(`Ph√¢n trang: trang ${currentPage}, hi·ªÉn th·ªã ${startIndex+1}-${Math.min(endIndex, allTransactions.length)} tr√™n ${allTransactions.length} giao d·ªãch`);
      setTransactions(allTransactions.slice(startIndex, endIndex));
    }
  }, [currentPage, allTransactions]);

  useEffect(() => {
    if (users.length > 0) {
      const filtered = users.filter(user =>
        user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.name.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setFilteredUsers(filtered);
    }
  }, [searchTerm, users]);

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'success':
        return 'text-success';
      case 'pending':
        return 'text-warning';
      case 'failed':
        return 'text-danger';
      default:
        return 'text-secondary';
    }
  };

  if (!isAdmin) {
    return (
      <div className="d-flex flex-column align-items-center justify-content-center vh-100">
        <div className="text-center p-5 bg-light rounded shadow" style={{ maxWidth: '600px' }}>
          <h2 className="text-danger mb-4">üîí Quy·ªÅn truy c·∫≠p b·ªã t·ª´ ch·ªëi</h2>
          <p className="lead mb-4">{error || "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y. Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ xem giao d·ªãch."}</p>
          <div className="d-flex justify-content-center gap-3">
            <button 
              className="btn btn-primary" 
              onClick={() => router.push("/admin/dashboard")}
            >
              V·ªÅ trang ch·ªß
            </button>
            <button 
              className="btn btn-outline-secondary" 
              onClick={() => {
                Cookies.remove("token");
                Cookies.remove("role");
                router.push("/auth/login");
              }}
            >
              ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n kh√°c
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="d-flex">
      {/* Sidebar */}
      <div className="bg-dark text-white vh-100 p-3" style={{ width: "250px" }}>
        <h4 className="text-center">Admin Panel</h4>
        <ul className="nav flex-column">
          <li className="nav-item">
            <Link className="nav-link text-white" href="/admin/stories">üìö Qu·∫£n l√Ω Truy·ªán</Link>
          </li>
          <li className="nav-item">
            <Link className="nav-link text-white" href="/admin/chapters">üìÑ Qu·∫£n l√Ω Ch∆∞∆°ng</Link>
          </li>
          <li className="nav-item">
            <Link className="nav-link text-white" href="/admin/comments">üí¨ Qu·∫£n l√Ω B√¨nh lu·∫≠n</Link>
          </li>
          <li className="nav-item">
            <Link className="nav-link text-white" href="/admin/users">üë§ Qu·∫£n l√Ω Ng∆∞·ªùi d√πng</Link>
          </li>
          <li className="nav-item">
            <Link className="nav-link text-white active" href="/admin/transactions">üí∞ Qu·∫£n l√Ω Giao d·ªãch</Link>
          </li>
          <li className="nav-item">
            <Link className="nav-link text-white" href="/upload">‚úçÔ∏è Upload ·∫£nh</Link>
          </li>
        </ul>
      </div>

      {/* Main Content */}
      <div className="flex-grow-1 p-4">
        <h2 className="mb-4">Qu·∫£n l√Ω Giao d·ªãch</h2>
        
        {error && <div className="alert alert-danger">{error}</div>}
        {success && <div className="alert alert-success">{success}</div>}

        <div className="row mb-4">
          <div className="col-md-6">
            <div className="input-group mb-3">
              <input
                type="text"
                className="form-control"
                placeholder="T√¨m ki·∫øm email ho·∫∑c t√™n ng∆∞·ªùi d√πng..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
              <button 
                className="btn btn-outline-secondary" 
                type="button"
                onClick={fetchUsers}
              >
                üîÑ L√†m m·ªõi
              </button>
            </div>
            <div className="mb-2">
              <small className="text-muted">ƒê√£ t·∫£i: {users.length} ng∆∞·ªùi d√πng</small>
            </div>
            <select
              className="form-select"
              value={selectedUserId || ""}
              onChange={(e) => {
                setError(null);
                setSelectedUserId(Number(e.target.value));
                setCurrentPage(1);
              }}
            >
              <option value="">Ch·ªçn ng∆∞·ªùi d√πng</option>
              {filteredUsers.map(user => (
                <option key={user.id} value={user.id}>
                  {user.email} - {user.name}
                </option>
              ))}
            </select>   
          </div>
        </div>
            <p>S·ªë d∆∞ t√†i kho·∫£n: {selectedUser?.total_point}</p>  
        {isLoading ? (
          <div className="text-center">ƒêang t·∫£i...</div>
        ) : selectedUserId ? (
          <>
            <div className="mb-3">
              T·ªïng s·ªë giao d·ªãch: {totalTransactions}
            </div>
            
            {transactions.length > 0 ? (
              <div className="table-responsive">
                <table className="table table-striped">
                  <thead>
                    <tr>
                      <th>ID</th>
                      <th>S·ªë ti·ªÅn</th>
                      <th>Lo·∫°i</th>
                      <th>Tr·∫°ng th√°i</th>
                      <th>M√¥ t·∫£</th>
                      <th>Th·ªùi gian</th>
                    </tr>
                  </thead>
                  <tbody>
                    {transactions.map(transaction => (
                      <tr key={transaction.id}>
                        <td>{transaction.id}</td>
                        <td>{transaction.amount.toLocaleString('vi-VN')}ƒë</td>
                        <td>{transaction.type}</td>
                        <td className={getStatusColor(transaction.status)}>
                          {transaction.status}
                        </td>
                        <td>{transaction.description}</td>
                        <td>{new Date(transaction.created_at).toLocaleString('vi-VN')}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="alert alert-info">Ng∆∞·ªùi d√πng n√†y ch∆∞a c√≥ giao d·ªãch n√†o</div>
            )}
            
            {totalPages > 1 && (
              <nav className="mt-4">
                <ul className="pagination justify-content-center">
                  {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
                    <li
                      key={page}
                      className={`page-item ${currentPage === page ? 'active' : ''}`}
                    >
                      <button
                        className="page-link"
                        onClick={() => setCurrentPage(page)}
                      >
                        {page}
                      </button>
                    </li>
                  ))}
                </ul>
              </nav>
            )}
          </>
        ) : (
          <div className="text-center">Vui l√≤ng ch·ªçn m·ªôt ng∆∞·ªùi d√πng ƒë·ªÉ xem giao d·ªãch</div>
        )}
      </div>
    </div>
  );
}

export default AdminTransactionsContent; 